// Code generated by MockGen. DO NOT EDIT.
// Source: delivery/pin_app.go

// Package mock_delivery is a generated GoMock package.
package mock_delivery

import (
	io "io"
	entity "pinterest/domain/entity"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockPinAppInterface is a mock of PinAppInterface interface.
type MockPinAppInterface struct {
	ctrl     *gomock.Controller
	recorder *MockPinAppInterfaceMockRecorder
}

// MockPinAppInterfaceMockRecorder is the mock recorder for MockPinAppInterface.
type MockPinAppInterfaceMockRecorder struct {
	mock *MockPinAppInterface
}

// NewMockPinAppInterface creates a new mock instance.
func NewMockPinAppInterface(ctrl *gomock.Controller) *MockPinAppInterface {
	mock := &MockPinAppInterface{ctrl: ctrl}
	mock.recorder = &MockPinAppInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPinAppInterface) EXPECT() *MockPinAppInterfaceMockRecorder {
	return m.recorder
}

// AddPin mocks base method.
func (m *MockPinAppInterface) AddPin(boardID, pinID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddPin", boardID, pinID)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddPin indicates an expected call of AddPin.
func (mr *MockPinAppInterfaceMockRecorder) AddPin(boardID, pinID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddPin", reflect.TypeOf((*MockPinAppInterface)(nil).AddPin), boardID, pinID)
}

// CreatePin mocks base method.
func (m *MockPinAppInterface) CreatePin(pin *entity.Pin, file io.Reader, extension string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePin", pin, file, extension)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePin indicates an expected call of CreatePin.
func (mr *MockPinAppInterfaceMockRecorder) CreatePin(pin, file, extension interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePin", reflect.TypeOf((*MockPinAppInterface)(nil).CreatePin), pin, file, extension)
}

// DeletePin mocks base method.
func (m *MockPinAppInterface) DeletePin(pinID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePin", pinID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePin indicates an expected call of DeletePin.
func (mr *MockPinAppInterfaceMockRecorder) DeletePin(pinID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePin", reflect.TypeOf((*MockPinAppInterface)(nil).DeletePin), pinID)
}

// GetLastPinID mocks base method.
func (m *MockPinAppInterface) GetLastPinID(userID int) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLastPinID", userID)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLastPinID indicates an expected call of GetLastPinID.
func (mr *MockPinAppInterfaceMockRecorder) GetLastPinID(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLastPinID", reflect.TypeOf((*MockPinAppInterface)(nil).GetLastPinID), userID)
}

// GetNumOfPins mocks base method.
func (m *MockPinAppInterface) GetNumOfPins(numOfPins int) ([]entity.Pin, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNumOfPins", numOfPins)
	ret0, _ := ret[0].([]entity.Pin)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNumOfPins indicates an expected call of GetNumOfPins.
func (mr *MockPinAppInterfaceMockRecorder) GetNumOfPins(numOfPins interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNumOfPins", reflect.TypeOf((*MockPinAppInterface)(nil).GetNumOfPins), numOfPins)
}

// GetPin mocks base method.
func (m *MockPinAppInterface) GetPin(pinID int) (*entity.Pin, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPin", pinID)
	ret0, _ := ret[0].(*entity.Pin)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPin indicates an expected call of GetPin.
func (mr *MockPinAppInterfaceMockRecorder) GetPin(pinID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPin", reflect.TypeOf((*MockPinAppInterface)(nil).GetPin), pinID)
}

// GetPins mocks base method.
func (m *MockPinAppInterface) GetPins(boardID int) ([]entity.Pin, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPins", boardID)
	ret0, _ := ret[0].([]entity.Pin)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPins indicates an expected call of GetPins.
func (mr *MockPinAppInterfaceMockRecorder) GetPins(boardID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPins", reflect.TypeOf((*MockPinAppInterface)(nil).GetPins), boardID)
}

// RemovePin mocks base method.
func (m *MockPinAppInterface) RemovePin(boardID, pinID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemovePin", boardID, pinID)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemovePin indicates an expected call of RemovePin.
func (mr *MockPinAppInterfaceMockRecorder) RemovePin(boardID, pinID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemovePin", reflect.TypeOf((*MockPinAppInterface)(nil).RemovePin), boardID, pinID)
}

// SavePicture mocks base method.
func (m *MockPinAppInterface) SavePicture(pin *entity.Pin) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SavePicture", pin)
	ret0, _ := ret[0].(error)
	return ret0
}

// SavePicture indicates an expected call of SavePicture.
func (mr *MockPinAppInterfaceMockRecorder) SavePicture(pin interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SavePicture", reflect.TypeOf((*MockPinAppInterface)(nil).SavePicture), pin)
}

// SavePin mocks base method.
func (m *MockPinAppInterface) SavePin(userID, pinID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SavePin", userID, pinID)
	ret0, _ := ret[0].(error)
	return ret0
}

// SavePin indicates an expected call of SavePin.
func (mr *MockPinAppInterfaceMockRecorder) SavePin(userID, pinID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SavePin", reflect.TypeOf((*MockPinAppInterface)(nil).SavePin), userID, pinID)
}

// SearchPins mocks base method.
func (m *MockPinAppInterface) SearchPins(keywords string) ([]entity.Pin, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchPins", keywords)
	ret0, _ := ret[0].([]entity.Pin)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchPins indicates an expected call of SearchPins.
func (mr *MockPinAppInterfaceMockRecorder) SearchPins(keywords interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchPins", reflect.TypeOf((*MockPinAppInterface)(nil).SearchPins), keywords)
}

// UploadPicture mocks base method.
func (m *MockPinAppInterface) UploadPicture(pinID int, file io.Reader, extension string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UploadPicture", pinID, file, extension)
	ret0, _ := ret[0].(error)
	return ret0
}

// UploadPicture indicates an expected call of UploadPicture.
func (mr *MockPinAppInterfaceMockRecorder) UploadPicture(pinID, file, extension interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UploadPicture", reflect.TypeOf((*MockPinAppInterface)(nil).UploadPicture), pinID, file, extension)
}
