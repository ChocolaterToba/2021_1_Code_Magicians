// Code generated by MockGen. DO NOT EDIT.
// Source: delivery/auth_app.go

// Package mock_delivery is a generated GoMock package.
package mock_delivery

import (
	http "net/http"
	entity "pinterest/domain/entity"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockAuthAppInterface is a mock of AuthAppInterface interface.
type MockAuthAppInterface struct {
	ctrl     *gomock.Controller
	recorder *MockAuthAppInterfaceMockRecorder
}

// MockAuthAppInterfaceMockRecorder is the mock recorder for MockAuthAppInterface.
type MockAuthAppInterfaceMockRecorder struct {
	mock *MockAuthAppInterface
}

// NewMockAuthAppInterface creates a new mock instance.
func NewMockAuthAppInterface(ctrl *gomock.Controller) *MockAuthAppInterface {
	mock := &MockAuthAppInterface{ctrl: ctrl}
	mock.recorder = &MockAuthAppInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthAppInterface) EXPECT() *MockAuthAppInterfaceMockRecorder {
	return m.recorder
}

// CheckCookie mocks base method.
func (m *MockAuthAppInterface) CheckCookie(cookie *http.Cookie) (*entity.CookieInfo, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckCookie", cookie)
	ret0, _ := ret[0].(*entity.CookieInfo)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// CheckCookie indicates an expected call of CheckCookie.
func (mr *MockAuthAppInterfaceMockRecorder) CheckCookie(cookie interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckCookie", reflect.TypeOf((*MockAuthAppInterface)(nil).CheckCookie), cookie)
}

// LoginUser mocks base method.
func (m *MockAuthAppInterface) LoginUser(username, password string) (*entity.CookieInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoginUser", username, password)
	ret0, _ := ret[0].(*entity.CookieInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoginUser indicates an expected call of LoginUser.
func (mr *MockAuthAppInterfaceMockRecorder) LoginUser(username, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoginUser", reflect.TypeOf((*MockAuthAppInterface)(nil).LoginUser), username, password)
}

// LogoutUser mocks base method.
func (m *MockAuthAppInterface) LogoutUser(userID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LogoutUser", userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// LogoutUser indicates an expected call of LogoutUser.
func (mr *MockAuthAppInterfaceMockRecorder) LogoutUser(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LogoutUser", reflect.TypeOf((*MockAuthAppInterface)(nil).LogoutUser), userID)
}
