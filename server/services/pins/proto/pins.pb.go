// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.6.1
// source: pins.proto

package __

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Board struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BoardID     int64  `protobuf:"varint,1,opt,name=BoardID,proto3" json:"BoardID,omitempty"`
	UserID      int64  `protobuf:"varint,2,opt,name=UserID,proto3" json:"UserID,omitempty"`
	Title       string `protobuf:"bytes,3,opt,name=Title,proto3" json:"Title,omitempty"`
	Description string `protobuf:"bytes,4,opt,name=Description,proto3" json:"Description,omitempty"`
	ImageLInk   string `protobuf:"bytes,5,opt,name=ImageLInk,proto3" json:"ImageLInk,omitempty"`
}

func (x *Board) Reset() {
	*x = Board{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pins_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Board) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Board) ProtoMessage() {}

func (x *Board) ProtoReflect() protoreflect.Message {
	mi := &file_pins_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Board.ProtoReflect.Descriptor instead.
func (*Board) Descriptor() ([]byte, []int) {
	return file_pins_proto_rawDescGZIP(), []int{0}
}

func (x *Board) GetBoardID() int64 {
	if x != nil {
		return x.BoardID
	}
	return 0
}

func (x *Board) GetUserID() int64 {
	if x != nil {
		return x.UserID
	}
	return 0
}

func (x *Board) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *Board) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Board) GetImageLInk() string {
	if x != nil {
		return x.ImageLInk
	}
	return ""
}

type Pin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PinID         int64  `protobuf:"varint,1,opt,name=PinID,proto3" json:"PinID,omitempty"`
	BoardID       int64  `protobuf:"varint,2,opt,name=BoardID,proto3" json:"BoardID,omitempty"`
	UserID        int64  `protobuf:"varint,3,opt,name=UserID,proto3" json:"UserID,omitempty"`
	Title         string `protobuf:"bytes,4,opt,name=Title,proto3" json:"Title,omitempty"`
	Description   string `protobuf:"bytes,5,opt,name=Description,proto3" json:"Description,omitempty"`
	ImageLink     string `protobuf:"bytes,6,opt,name=ImageLink,proto3" json:"ImageLink,omitempty"`
	ImageHeight   int32  `protobuf:"varint,7,opt,name=ImageHeight,proto3" json:"ImageHeight,omitempty"`
	ImageWidth    int32  `protobuf:"varint,8,opt,name=ImageWidth,proto3" json:"ImageWidth,omitempty"`
	ImageAvgColor string `protobuf:"bytes,9,opt,name=ImageAvgColor,proto3" json:"ImageAvgColor,omitempty"`
}

func (x *Pin) Reset() {
	*x = Pin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pins_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Pin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Pin) ProtoMessage() {}

func (x *Pin) ProtoReflect() protoreflect.Message {
	mi := &file_pins_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Pin.ProtoReflect.Descriptor instead.
func (*Pin) Descriptor() ([]byte, []int) {
	return file_pins_proto_rawDescGZIP(), []int{1}
}

func (x *Pin) GetPinID() int64 {
	if x != nil {
		return x.PinID
	}
	return 0
}

func (x *Pin) GetBoardID() int64 {
	if x != nil {
		return x.BoardID
	}
	return 0
}

func (x *Pin) GetUserID() int64 {
	if x != nil {
		return x.UserID
	}
	return 0
}

func (x *Pin) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *Pin) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Pin) GetImageLink() string {
	if x != nil {
		return x.ImageLink
	}
	return ""
}

func (x *Pin) GetImageHeight() int32 {
	if x != nil {
		return x.ImageHeight
	}
	return 0
}

func (x *Pin) GetImageWidth() int32 {
	if x != nil {
		return x.ImageWidth
	}
	return 0
}

func (x *Pin) GetImageAvgColor() string {
	if x != nil {
		return x.ImageAvgColor
	}
	return ""
}

type UserID struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid int64 `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`
}

func (x *UserID) Reset() {
	*x = UserID{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pins_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserID) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserID) ProtoMessage() {}

func (x *UserID) ProtoReflect() protoreflect.Message {
	mi := &file_pins_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserID.ProtoReflect.Descriptor instead.
func (*UserID) Descriptor() ([]byte, []int) {
	return file_pins_proto_rawDescGZIP(), []int{2}
}

func (x *UserID) GetUid() int64 {
	if x != nil {
		return x.Uid
	}
	return 0
}

type BoardID struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BoardID int64 `protobuf:"varint,1,opt,name=boardID,proto3" json:"boardID,omitempty"`
}

func (x *BoardID) Reset() {
	*x = BoardID{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pins_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BoardID) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BoardID) ProtoMessage() {}

func (x *BoardID) ProtoReflect() protoreflect.Message {
	mi := &file_pins_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BoardID.ProtoReflect.Descriptor instead.
func (*BoardID) Descriptor() ([]byte, []int) {
	return file_pins_proto_rawDescGZIP(), []int{3}
}

func (x *BoardID) GetBoardID() int64 {
	if x != nil {
		return x.BoardID
	}
	return 0
}

type BoardsList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Boards []*Board `protobuf:"bytes,1,rep,name=boards,proto3" json:"boards,omitempty"`
}

func (x *BoardsList) Reset() {
	*x = BoardsList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pins_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BoardsList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BoardsList) ProtoMessage() {}

func (x *BoardsList) ProtoReflect() protoreflect.Message {
	mi := &file_pins_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BoardsList.ProtoReflect.Descriptor instead.
func (*BoardsList) Descriptor() ([]byte, []int) {
	return file_pins_proto_rawDescGZIP(), []int{4}
}

func (x *BoardsList) GetBoards() []*Board {
	if x != nil {
		return x.Boards
	}
	return nil
}

type PinsList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pins []*Pin `protobuf:"bytes,1,rep,name=pins,proto3" json:"pins,omitempty"`
}

func (x *PinsList) Reset() {
	*x = PinsList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pins_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PinsList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PinsList) ProtoMessage() {}

func (x *PinsList) ProtoReflect() protoreflect.Message {
	mi := &file_pins_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PinsList.ProtoReflect.Descriptor instead.
func (*PinsList) Descriptor() ([]byte, []int) {
	return file_pins_proto_rawDescGZIP(), []int{5}
}

func (x *PinsList) GetPins() []*Pin {
	if x != nil {
		return x.Pins
	}
	return nil
}

type PinID struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PinID int64 `protobuf:"varint,1,opt,name=pinID,proto3" json:"pinID,omitempty"`
}

func (x *PinID) Reset() {
	*x = PinID{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pins_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PinID) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PinID) ProtoMessage() {}

func (x *PinID) ProtoReflect() protoreflect.Message {
	mi := &file_pins_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PinID.ProtoReflect.Descriptor instead.
func (*PinID) Descriptor() ([]byte, []int) {
	return file_pins_proto_rawDescGZIP(), []int{6}
}

func (x *PinID) GetPinID() int64 {
	if x != nil {
		return x.PinID
	}
	return 0
}

type Save struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID int64 `protobuf:"varint,1,opt,name=userID,proto3" json:"userID,omitempty"`
	PinID  int64 `protobuf:"varint,2,opt,name=pinID,proto3" json:"pinID,omitempty"`
}

func (x *Save) Reset() {
	*x = Save{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pins_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Save) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Save) ProtoMessage() {}

func (x *Save) ProtoReflect() protoreflect.Message {
	mi := &file_pins_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Save.ProtoReflect.Descriptor instead.
func (*Save) Descriptor() ([]byte, []int) {
	return file_pins_proto_rawDescGZIP(), []int{7}
}

func (x *Save) GetUserID() int64 {
	if x != nil {
		return x.UserID
	}
	return 0
}

func (x *Save) GetPinID() int64 {
	if x != nil {
		return x.PinID
	}
	return 0
}

type BoardOwner struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID  int64 `protobuf:"varint,1,opt,name=userID,proto3" json:"userID,omitempty"`
	BoardID int64 `protobuf:"varint,2,opt,name=boardID,proto3" json:"boardID,omitempty"`
}

func (x *BoardOwner) Reset() {
	*x = BoardOwner{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pins_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BoardOwner) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BoardOwner) ProtoMessage() {}

func (x *BoardOwner) ProtoReflect() protoreflect.Message {
	mi := &file_pins_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BoardOwner.ProtoReflect.Descriptor instead.
func (*BoardOwner) Descriptor() ([]byte, []int) {
	return file_pins_proto_rawDescGZIP(), []int{8}
}

func (x *BoardOwner) GetUserID() int64 {
	if x != nil {
		return x.UserID
	}
	return 0
}

func (x *BoardOwner) GetBoardID() int64 {
	if x != nil {
		return x.BoardID
	}
	return 0
}

type PinInBoard struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BoardID int64 `protobuf:"varint,1,opt,name=boardID,proto3" json:"boardID,omitempty"`
	PinID   int64 `protobuf:"varint,2,opt,name=pinID,proto3" json:"pinID,omitempty"`
}

func (x *PinInBoard) Reset() {
	*x = PinInBoard{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pins_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PinInBoard) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PinInBoard) ProtoMessage() {}

func (x *PinInBoard) ProtoReflect() protoreflect.Message {
	mi := &file_pins_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PinInBoard.ProtoReflect.Descriptor instead.
func (*PinInBoard) Descriptor() ([]byte, []int) {
	return file_pins_proto_rawDescGZIP(), []int{9}
}

func (x *PinInBoard) GetBoardID() int64 {
	if x != nil {
		return x.BoardID
	}
	return 0
}

func (x *PinInBoard) GetPinID() int64 {
	if x != nil {
		return x.PinID
	}
	return 0
}

type UploadImage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Data:
	//	*UploadImage_Extension
	//	*UploadImage_ChunkData
	Data isUploadImage_Data `protobuf_oneof:"data"`
}

func (x *UploadImage) Reset() {
	*x = UploadImage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pins_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UploadImage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadImage) ProtoMessage() {}

func (x *UploadImage) ProtoReflect() protoreflect.Message {
	mi := &file_pins_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadImage.ProtoReflect.Descriptor instead.
func (*UploadImage) Descriptor() ([]byte, []int) {
	return file_pins_proto_rawDescGZIP(), []int{10}
}

func (m *UploadImage) GetData() isUploadImage_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

func (x *UploadImage) GetExtension() string {
	if x, ok := x.GetData().(*UploadImage_Extension); ok {
		return x.Extension
	}
	return ""
}

func (x *UploadImage) GetChunkData() []byte {
	if x, ok := x.GetData().(*UploadImage_ChunkData); ok {
		return x.ChunkData
	}
	return nil
}

type isUploadImage_Data interface {
	isUploadImage_Data()
}

type UploadImage_Extension struct {
	Extension string `protobuf:"bytes,1,opt,name=Extension,proto3,oneof"`
}

type UploadImage_ChunkData struct {
	ChunkData []byte `protobuf:"bytes,2,opt,name=chunk_data,json=chunkData,proto3,oneof"`
}

func (*UploadImage_Extension) isUploadImage_Data() {}

func (*UploadImage_ChunkData) isUploadImage_Data() {}

type UploadImageResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Path string `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	Size uint32 `protobuf:"varint,2,opt,name=size,proto3" json:"size,omitempty"`
}

func (x *UploadImageResponse) Reset() {
	*x = UploadImageResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pins_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UploadImageResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadImageResponse) ProtoMessage() {}

func (x *UploadImageResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pins_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadImageResponse.ProtoReflect.Descriptor instead.
func (*UploadImageResponse) Descriptor() ([]byte, []int) {
	return file_pins_proto_rawDescGZIP(), []int{11}
}

func (x *UploadImageResponse) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *UploadImageResponse) GetSize() uint32 {
	if x != nil {
		return x.Size
	}
	return 0
}

type FileInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ImagePath string `protobuf:"bytes,1,opt,name=imagePath,proto3" json:"imagePath,omitempty"`
	BoardID   int64  `protobuf:"varint,2,opt,name=boardID,proto3" json:"boardID,omitempty"`
}

func (x *FileInfo) Reset() {
	*x = FileInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pins_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FileInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileInfo) ProtoMessage() {}

func (x *FileInfo) ProtoReflect() protoreflect.Message {
	mi := &file_pins_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileInfo.ProtoReflect.Descriptor instead.
func (*FileInfo) Descriptor() ([]byte, []int) {
	return file_pins_proto_rawDescGZIP(), []int{12}
}

func (x *FileInfo) GetImagePath() string {
	if x != nil {
		return x.ImagePath
	}
	return ""
}

func (x *FileInfo) GetBoardID() int64 {
	if x != nil {
		return x.BoardID
	}
	return 0
}

type SearchInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	KeyWords string `protobuf:"bytes,1,opt,name=keyWords,proto3" json:"keyWords,omitempty"`
}

func (x *SearchInput) Reset() {
	*x = SearchInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pins_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchInput) ProtoMessage() {}

func (x *SearchInput) ProtoReflect() protoreflect.Message {
	mi := &file_pins_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchInput.ProtoReflect.Descriptor instead.
func (*SearchInput) Descriptor() ([]byte, []int) {
	return file_pins_proto_rawDescGZIP(), []int{13}
}

func (x *SearchInput) GetKeyWords() string {
	if x != nil {
		return x.KeyWords
	}
	return ""
}

type Number struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Number int64 `protobuf:"varint,1,opt,name=number,proto3" json:"number,omitempty"`
}

func (x *Number) Reset() {
	*x = Number{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pins_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Number) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Number) ProtoMessage() {}

func (x *Number) ProtoReflect() protoreflect.Message {
	mi := &file_pins_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Number.ProtoReflect.Descriptor instead.
func (*Number) Descriptor() ([]byte, []int) {
	return file_pins_proto_rawDescGZIP(), []int{14}
}

func (x *Number) GetNumber() int64 {
	if x != nil {
		return x.Number
	}
	return 0
}

type Error struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Error) Reset() {
	*x = Error{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pins_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Error) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Error) ProtoMessage() {}

func (x *Error) ProtoReflect() protoreflect.Message {
	mi := &file_pins_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Error.ProtoReflect.Descriptor instead.
func (*Error) Descriptor() ([]byte, []int) {
	return file_pins_proto_rawDescGZIP(), []int{15}
}

var File_pins_proto protoreflect.FileDescriptor

var file_pins_proto_rawDesc = []byte{
	0x0a, 0x0a, 0x70, 0x69, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x04, 0x70, 0x69,
	0x6e, 0x73, 0x22, 0x8f, 0x01, 0x0a, 0x05, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x12, 0x18, 0x0a, 0x07,
	0x42, 0x6f, 0x61, 0x72, 0x64, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x42,
	0x6f, 0x61, 0x72, 0x64, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x14,
	0x0a, 0x05, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x54,
	0x69, 0x74, 0x6c, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x4c,
	0x49, 0x6e, 0x6b, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x49, 0x6d, 0x61, 0x67, 0x65,
	0x4c, 0x49, 0x6e, 0x6b, 0x22, 0x8b, 0x02, 0x0a, 0x03, 0x50, 0x69, 0x6e, 0x12, 0x14, 0x0a, 0x05,
	0x50, 0x69, 0x6e, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x50, 0x69, 0x6e,
	0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x49, 0x44, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x07, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06,
	0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x55, 0x73,
	0x65, 0x72, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x44, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09,
	0x49, 0x6d, 0x61, 0x67, 0x65, 0x4c, 0x69, 0x6e, 0x6b, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x20, 0x0a, 0x0b, 0x49, 0x6d,
	0x61, 0x67, 0x65, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0b, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x1e, 0x0a, 0x0a,
	0x49, 0x6d, 0x61, 0x67, 0x65, 0x57, 0x69, 0x64, 0x74, 0x68, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0a, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x57, 0x69, 0x64, 0x74, 0x68, 0x12, 0x24, 0x0a, 0x0d,
	0x49, 0x6d, 0x61, 0x67, 0x65, 0x41, 0x76, 0x67, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x41, 0x76, 0x67, 0x43, 0x6f, 0x6c,
	0x6f, 0x72, 0x22, 0x1a, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x10, 0x0a, 0x03,
	0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x75, 0x69, 0x64, 0x22, 0x23,
	0x0a, 0x07, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x6f, 0x61,
	0x72, 0x64, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x62, 0x6f, 0x61, 0x72,
	0x64, 0x49, 0x44, 0x22, 0x31, 0x0a, 0x0a, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x23, 0x0a, 0x06, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x0b, 0x2e, 0x70, 0x69, 0x6e, 0x73, 0x2e, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x52, 0x06,
	0x62, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x22, 0x29, 0x0a, 0x08, 0x50, 0x69, 0x6e, 0x73, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x1d, 0x0a, 0x04, 0x70, 0x69, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x09, 0x2e, 0x70, 0x69, 0x6e, 0x73, 0x2e, 0x50, 0x69, 0x6e, 0x52, 0x04, 0x70, 0x69, 0x6e,
	0x73, 0x22, 0x1d, 0x0a, 0x05, 0x50, 0x69, 0x6e, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x69,
	0x6e, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x70, 0x69, 0x6e, 0x49, 0x44,
	0x22, 0x34, 0x0a, 0x04, 0x53, 0x61, 0x76, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72,
	0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44,
	0x12, 0x14, 0x0a, 0x05, 0x70, 0x69, 0x6e, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x05, 0x70, 0x69, 0x6e, 0x49, 0x44, 0x22, 0x3e, 0x0a, 0x0a, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x4f,
	0x77, 0x6e, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07,
	0x62, 0x6f, 0x61, 0x72, 0x64, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x62,
	0x6f, 0x61, 0x72, 0x64, 0x49, 0x44, 0x22, 0x3c, 0x0a, 0x0a, 0x50, 0x69, 0x6e, 0x49, 0x6e, 0x42,
	0x6f, 0x61, 0x72, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x49, 0x44, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x49, 0x44, 0x12, 0x14,
	0x0a, 0x05, 0x70, 0x69, 0x6e, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x70,
	0x69, 0x6e, 0x49, 0x44, 0x22, 0x56, 0x0a, 0x0b, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x49, 0x6d,
	0x61, 0x67, 0x65, 0x12, 0x1e, 0x0a, 0x09, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x09, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0a, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x5f, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x09, 0x63, 0x68, 0x75, 0x6e, 0x6b,
	0x44, 0x61, 0x74, 0x61, 0x42, 0x06, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x3d, 0x0a, 0x13,
	0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x22, 0x42, 0x0a, 0x08, 0x46,
	0x69, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x6d, 0x61, 0x67, 0x65,
	0x50, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x6d, 0x61, 0x67,
	0x65, 0x50, 0x61, 0x74, 0x68, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x49, 0x44,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x49, 0x44, 0x22,
	0x29, 0x0a, 0x0b, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x1a,
	0x0a, 0x08, 0x6b, 0x65, 0x79, 0x57, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x6b, 0x65, 0x79, 0x57, 0x6f, 0x72, 0x64, 0x73, 0x22, 0x20, 0x0a, 0x06, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22, 0x07, 0x0a, 0x05,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x32, 0xc2, 0x06, 0x0a, 0x04, 0x50, 0x69, 0x6e, 0x73, 0x12, 0x28,
	0x0a, 0x08, 0x41, 0x64, 0x64, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x12, 0x0b, 0x2e, 0x70, 0x69, 0x6e,
	0x73, 0x2e, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x1a, 0x0d, 0x2e, 0x70, 0x69, 0x6e, 0x73, 0x2e, 0x42,
	0x6f, 0x61, 0x72, 0x64, 0x49, 0x44, 0x22, 0x00, 0x12, 0x28, 0x0a, 0x08, 0x47, 0x65, 0x74, 0x42,
	0x6f, 0x61, 0x72, 0x64, 0x12, 0x0d, 0x2e, 0x70, 0x69, 0x6e, 0x73, 0x2e, 0x42, 0x6f, 0x61, 0x72,
	0x64, 0x49, 0x44, 0x1a, 0x0b, 0x2e, 0x70, 0x69, 0x6e, 0x73, 0x2e, 0x42, 0x6f, 0x61, 0x72, 0x64,
	0x22, 0x00, 0x12, 0x2d, 0x0a, 0x09, 0x47, 0x65, 0x74, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x12,
	0x0c, 0x2e, 0x70, 0x69, 0x6e, 0x73, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x1a, 0x10, 0x2e,
	0x70, 0x69, 0x6e, 0x73, 0x2e, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x22,
	0x00, 0x12, 0x31, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x69, 0x74, 0x55, 0x73, 0x65, 0x72,
	0x42, 0x6f, 0x61, 0x72, 0x64, 0x12, 0x0c, 0x2e, 0x70, 0x69, 0x6e, 0x73, 0x2e, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x44, 0x1a, 0x0d, 0x2e, 0x70, 0x69, 0x6e, 0x73, 0x2e, 0x42, 0x6f, 0x61, 0x72, 0x64,
	0x49, 0x44, 0x22, 0x00, 0x12, 0x2b, 0x0a, 0x0b, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x42, 0x6f,
	0x61, 0x72, 0x64, 0x12, 0x0d, 0x2e, 0x70, 0x69, 0x6e, 0x73, 0x2e, 0x42, 0x6f, 0x61, 0x72, 0x64,
	0x49, 0x44, 0x1a, 0x0b, 0x2e, 0x70, 0x69, 0x6e, 0x73, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x22,
	0x00, 0x12, 0x32, 0x0a, 0x11, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x42, 0x6f, 0x61, 0x72, 0x64,
	0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x12, 0x0e, 0x2e, 0x70, 0x69, 0x6e, 0x73, 0x2e, 0x46, 0x69,
	0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x1a, 0x0b, 0x2e, 0x70, 0x69, 0x6e, 0x73, 0x2e, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x22, 0x00, 0x12, 0x25, 0x0a, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50,
	0x69, 0x6e, 0x12, 0x09, 0x2e, 0x70, 0x69, 0x6e, 0x73, 0x2e, 0x50, 0x69, 0x6e, 0x1a, 0x0b, 0x2e,
	0x70, 0x69, 0x6e, 0x73, 0x2e, 0x50, 0x69, 0x6e, 0x49, 0x44, 0x22, 0x00, 0x12, 0x29, 0x0a, 0x06,
	0x41, 0x64, 0x64, 0x50, 0x69, 0x6e, 0x12, 0x10, 0x2e, 0x70, 0x69, 0x6e, 0x73, 0x2e, 0x50, 0x69,
	0x6e, 0x49, 0x6e, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x1a, 0x0b, 0x2e, 0x70, 0x69, 0x6e, 0x73, 0x2e,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x00, 0x12, 0x22, 0x0a, 0x06, 0x47, 0x65, 0x74, 0x50, 0x69,
	0x6e, 0x12, 0x0b, 0x2e, 0x70, 0x69, 0x6e, 0x73, 0x2e, 0x50, 0x69, 0x6e, 0x49, 0x44, 0x1a, 0x09,
	0x2e, 0x70, 0x69, 0x6e, 0x73, 0x2e, 0x50, 0x69, 0x6e, 0x22, 0x00, 0x12, 0x2a, 0x0a, 0x07, 0x47,
	0x65, 0x74, 0x50, 0x69, 0x6e, 0x73, 0x12, 0x0d, 0x2e, 0x70, 0x69, 0x6e, 0x73, 0x2e, 0x42, 0x6f,
	0x61, 0x72, 0x64, 0x49, 0x44, 0x1a, 0x0e, 0x2e, 0x70, 0x69, 0x6e, 0x73, 0x2e, 0x50, 0x69, 0x6e,
	0x73, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x00, 0x12, 0x2f, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x4c, 0x61,
	0x73, 0x74, 0x55, 0x73, 0x65, 0x72, 0x50, 0x69, 0x6e, 0x49, 0x44, 0x12, 0x0c, 0x2e, 0x70, 0x69,
	0x6e, 0x73, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x1a, 0x0b, 0x2e, 0x70, 0x69, 0x6e, 0x73,
	0x2e, 0x50, 0x69, 0x6e, 0x49, 0x44, 0x22, 0x00, 0x12, 0x27, 0x0a, 0x0b, 0x53, 0x61, 0x76, 0x65,
	0x50, 0x69, 0x63, 0x74, 0x75, 0x72, 0x65, 0x12, 0x09, 0x2e, 0x70, 0x69, 0x6e, 0x73, 0x2e, 0x50,
	0x69, 0x6e, 0x1a, 0x0b, 0x2e, 0x70, 0x69, 0x6e, 0x73, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x22,
	0x00, 0x12, 0x2c, 0x0a, 0x09, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x50, 0x69, 0x6e, 0x12, 0x10,
	0x2e, 0x70, 0x69, 0x6e, 0x73, 0x2e, 0x50, 0x69, 0x6e, 0x49, 0x6e, 0x42, 0x6f, 0x61, 0x72, 0x64,
	0x1a, 0x0b, 0x2e, 0x70, 0x69, 0x6e, 0x73, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x00, 0x12,
	0x27, 0x0a, 0x09, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x69, 0x6e, 0x12, 0x0b, 0x2e, 0x70,
	0x69, 0x6e, 0x73, 0x2e, 0x50, 0x69, 0x6e, 0x49, 0x44, 0x1a, 0x0b, 0x2e, 0x70, 0x69, 0x6e, 0x73,
	0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x00, 0x12, 0x41, 0x0a, 0x0d, 0x55, 0x70, 0x6c, 0x6f,
	0x61, 0x64, 0x50, 0x69, 0x63, 0x74, 0x75, 0x72, 0x65, 0x12, 0x11, 0x2e, 0x70, 0x69, 0x6e, 0x73,
	0x2e, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x1a, 0x19, 0x2e, 0x70,
	0x69, 0x6e, 0x73, 0x2e, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x28, 0x01, 0x12, 0x2e, 0x0a, 0x0c, 0x47,
	0x65, 0x74, 0x4e, 0x75, 0x6d, 0x4f, 0x66, 0x50, 0x69, 0x6e, 0x73, 0x12, 0x0c, 0x2e, 0x70, 0x69,
	0x6e, 0x73, 0x2e, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x1a, 0x0e, 0x2e, 0x70, 0x69, 0x6e, 0x73,
	0x2e, 0x50, 0x69, 0x6e, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x00, 0x12, 0x31, 0x0a, 0x0a, 0x53,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x50, 0x69, 0x6e, 0x73, 0x12, 0x11, 0x2e, 0x70, 0x69, 0x6e, 0x73,
	0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x1a, 0x0e, 0x2e, 0x70,
	0x69, 0x6e, 0x73, 0x2e, 0x50, 0x69, 0x6e, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x00, 0x12, 0x2a,
	0x0a, 0x0b, 0x50, 0x69, 0x6e, 0x52, 0x65, 0x66, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x0b, 0x2e,
	0x70, 0x69, 0x6e, 0x73, 0x2e, 0x50, 0x69, 0x6e, 0x49, 0x44, 0x1a, 0x0c, 0x2e, 0x70, 0x69, 0x6e,
	0x73, 0x2e, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22, 0x00, 0x42, 0x04, 0x5a, 0x02, 0x2e, 0x2f,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_pins_proto_rawDescOnce sync.Once
	file_pins_proto_rawDescData = file_pins_proto_rawDesc
)

func file_pins_proto_rawDescGZIP() []byte {
	file_pins_proto_rawDescOnce.Do(func() {
		file_pins_proto_rawDescData = protoimpl.X.CompressGZIP(file_pins_proto_rawDescData)
	})
	return file_pins_proto_rawDescData
}

var file_pins_proto_msgTypes = make([]protoimpl.MessageInfo, 16)
var file_pins_proto_goTypes = []interface{}{
	(*Board)(nil),               // 0: pins.Board
	(*Pin)(nil),                 // 1: pins.Pin
	(*UserID)(nil),              // 2: pins.UserID
	(*BoardID)(nil),             // 3: pins.BoardID
	(*BoardsList)(nil),          // 4: pins.BoardsList
	(*PinsList)(nil),            // 5: pins.PinsList
	(*PinID)(nil),               // 6: pins.PinID
	(*Save)(nil),                // 7: pins.Save
	(*BoardOwner)(nil),          // 8: pins.BoardOwner
	(*PinInBoard)(nil),          // 9: pins.PinInBoard
	(*UploadImage)(nil),         // 10: pins.UploadImage
	(*UploadImageResponse)(nil), // 11: pins.UploadImageResponse
	(*FileInfo)(nil),            // 12: pins.FileInfo
	(*SearchInput)(nil),         // 13: pins.SearchInput
	(*Number)(nil),              // 14: pins.Number
	(*Error)(nil),               // 15: pins.Error
}
var file_pins_proto_depIdxs = []int32{
	0,  // 0: pins.BoardsList.boards:type_name -> pins.Board
	1,  // 1: pins.PinsList.pins:type_name -> pins.Pin
	0,  // 2: pins.Pins.AddBoard:input_type -> pins.Board
	3,  // 3: pins.Pins.GetBoard:input_type -> pins.BoardID
	2,  // 4: pins.Pins.GetBoards:input_type -> pins.UserID
	2,  // 5: pins.Pins.GetInitUserBoard:input_type -> pins.UserID
	3,  // 6: pins.Pins.DeleteBoard:input_type -> pins.BoardID
	12, // 7: pins.Pins.UploadBoardAvatar:input_type -> pins.FileInfo
	1,  // 8: pins.Pins.CreatePin:input_type -> pins.Pin
	9,  // 9: pins.Pins.AddPin:input_type -> pins.PinInBoard
	6,  // 10: pins.Pins.GetPin:input_type -> pins.PinID
	3,  // 11: pins.Pins.GetPins:input_type -> pins.BoardID
	2,  // 12: pins.Pins.GetLastUserPinID:input_type -> pins.UserID
	1,  // 13: pins.Pins.SavePicture:input_type -> pins.Pin
	9,  // 14: pins.Pins.RemovePin:input_type -> pins.PinInBoard
	6,  // 15: pins.Pins.DeletePin:input_type -> pins.PinID
	10, // 16: pins.Pins.UploadPicture:input_type -> pins.UploadImage
	14, // 17: pins.Pins.GetNumOfPins:input_type -> pins.Number
	13, // 18: pins.Pins.SearchPins:input_type -> pins.SearchInput
	6,  // 19: pins.Pins.PinRefCount:input_type -> pins.PinID
	3,  // 20: pins.Pins.AddBoard:output_type -> pins.BoardID
	0,  // 21: pins.Pins.GetBoard:output_type -> pins.Board
	4,  // 22: pins.Pins.GetBoards:output_type -> pins.BoardsList
	3,  // 23: pins.Pins.GetInitUserBoard:output_type -> pins.BoardID
	15, // 24: pins.Pins.DeleteBoard:output_type -> pins.Error
	15, // 25: pins.Pins.UploadBoardAvatar:output_type -> pins.Error
	6,  // 26: pins.Pins.CreatePin:output_type -> pins.PinID
	15, // 27: pins.Pins.AddPin:output_type -> pins.Error
	1,  // 28: pins.Pins.GetPin:output_type -> pins.Pin
	5,  // 29: pins.Pins.GetPins:output_type -> pins.PinsList
	6,  // 30: pins.Pins.GetLastUserPinID:output_type -> pins.PinID
	15, // 31: pins.Pins.SavePicture:output_type -> pins.Error
	15, // 32: pins.Pins.RemovePin:output_type -> pins.Error
	15, // 33: pins.Pins.DeletePin:output_type -> pins.Error
	11, // 34: pins.Pins.UploadPicture:output_type -> pins.UploadImageResponse
	5,  // 35: pins.Pins.GetNumOfPins:output_type -> pins.PinsList
	5,  // 36: pins.Pins.SearchPins:output_type -> pins.PinsList
	14, // 37: pins.Pins.PinRefCount:output_type -> pins.Number
	20, // [20:38] is the sub-list for method output_type
	2,  // [2:20] is the sub-list for method input_type
	2,  // [2:2] is the sub-list for extension type_name
	2,  // [2:2] is the sub-list for extension extendee
	0,  // [0:2] is the sub-list for field type_name
}

func init() { file_pins_proto_init() }
func file_pins_proto_init() {
	if File_pins_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_pins_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Board); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pins_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Pin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pins_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserID); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pins_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BoardID); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pins_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BoardsList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pins_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PinsList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pins_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PinID); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pins_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Save); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pins_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BoardOwner); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pins_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PinInBoard); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pins_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UploadImage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pins_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UploadImageResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pins_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FileInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pins_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pins_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Number); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pins_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Error); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_pins_proto_msgTypes[10].OneofWrappers = []interface{}{
		(*UploadImage_Extension)(nil),
		(*UploadImage_ChunkData)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_pins_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   16,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_pins_proto_goTypes,
		DependencyIndexes: file_pins_proto_depIdxs,
		MessageInfos:      file_pins_proto_msgTypes,
	}.Build()
	File_pins_proto = out.File
	file_pins_proto_rawDesc = nil
	file_pins_proto_goTypes = nil
	file_pins_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// PinsClient is the client API for Pins service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type PinsClient interface {
	AddBoard(ctx context.Context, in *Board, opts ...grpc.CallOption) (*BoardID, error)
	GetBoard(ctx context.Context, in *BoardID, opts ...grpc.CallOption) (*Board, error)
	GetBoards(ctx context.Context, in *UserID, opts ...grpc.CallOption) (*BoardsList, error)
	GetInitUserBoard(ctx context.Context, in *UserID, opts ...grpc.CallOption) (*BoardID, error)
	DeleteBoard(ctx context.Context, in *BoardID, opts ...grpc.CallOption) (*Error, error)
	UploadBoardAvatar(ctx context.Context, in *FileInfo, opts ...grpc.CallOption) (*Error, error)
	CreatePin(ctx context.Context, in *Pin, opts ...grpc.CallOption) (*PinID, error)
	AddPin(ctx context.Context, in *PinInBoard, opts ...grpc.CallOption) (*Error, error)
	GetPin(ctx context.Context, in *PinID, opts ...grpc.CallOption) (*Pin, error)
	GetPins(ctx context.Context, in *BoardID, opts ...grpc.CallOption) (*PinsList, error)
	GetLastUserPinID(ctx context.Context, in *UserID, opts ...grpc.CallOption) (*PinID, error)
	SavePicture(ctx context.Context, in *Pin, opts ...grpc.CallOption) (*Error, error)
	RemovePin(ctx context.Context, in *PinInBoard, opts ...grpc.CallOption) (*Error, error)
	DeletePin(ctx context.Context, in *PinID, opts ...grpc.CallOption) (*Error, error)
	UploadPicture(ctx context.Context, opts ...grpc.CallOption) (Pins_UploadPictureClient, error)
	GetNumOfPins(ctx context.Context, in *Number, opts ...grpc.CallOption) (*PinsList, error)
	SearchPins(ctx context.Context, in *SearchInput, opts ...grpc.CallOption) (*PinsList, error)
	PinRefCount(ctx context.Context, in *PinID, opts ...grpc.CallOption) (*Number, error)
}

type pinsClient struct {
	cc grpc.ClientConnInterface
}

func NewPinsClient(cc grpc.ClientConnInterface) PinsClient {
	return &pinsClient{cc}
}

func (c *pinsClient) AddBoard(ctx context.Context, in *Board, opts ...grpc.CallOption) (*BoardID, error) {
	out := new(BoardID)
	err := c.cc.Invoke(ctx, "/pins.Pins/AddBoard", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pinsClient) GetBoard(ctx context.Context, in *BoardID, opts ...grpc.CallOption) (*Board, error) {
	out := new(Board)
	err := c.cc.Invoke(ctx, "/pins.Pins/GetBoard", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pinsClient) GetBoards(ctx context.Context, in *UserID, opts ...grpc.CallOption) (*BoardsList, error) {
	out := new(BoardsList)
	err := c.cc.Invoke(ctx, "/pins.Pins/GetBoards", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pinsClient) GetInitUserBoard(ctx context.Context, in *UserID, opts ...grpc.CallOption) (*BoardID, error) {
	out := new(BoardID)
	err := c.cc.Invoke(ctx, "/pins.Pins/GetInitUserBoard", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pinsClient) DeleteBoard(ctx context.Context, in *BoardID, opts ...grpc.CallOption) (*Error, error) {
	out := new(Error)
	err := c.cc.Invoke(ctx, "/pins.Pins/DeleteBoard", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pinsClient) UploadBoardAvatar(ctx context.Context, in *FileInfo, opts ...grpc.CallOption) (*Error, error) {
	out := new(Error)
	err := c.cc.Invoke(ctx, "/pins.Pins/UploadBoardAvatar", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pinsClient) CreatePin(ctx context.Context, in *Pin, opts ...grpc.CallOption) (*PinID, error) {
	out := new(PinID)
	err := c.cc.Invoke(ctx, "/pins.Pins/CreatePin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pinsClient) AddPin(ctx context.Context, in *PinInBoard, opts ...grpc.CallOption) (*Error, error) {
	out := new(Error)
	err := c.cc.Invoke(ctx, "/pins.Pins/AddPin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pinsClient) GetPin(ctx context.Context, in *PinID, opts ...grpc.CallOption) (*Pin, error) {
	out := new(Pin)
	err := c.cc.Invoke(ctx, "/pins.Pins/GetPin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pinsClient) GetPins(ctx context.Context, in *BoardID, opts ...grpc.CallOption) (*PinsList, error) {
	out := new(PinsList)
	err := c.cc.Invoke(ctx, "/pins.Pins/GetPins", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pinsClient) GetLastUserPinID(ctx context.Context, in *UserID, opts ...grpc.CallOption) (*PinID, error) {
	out := new(PinID)
	err := c.cc.Invoke(ctx, "/pins.Pins/GetLastUserPinID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pinsClient) SavePicture(ctx context.Context, in *Pin, opts ...grpc.CallOption) (*Error, error) {
	out := new(Error)
	err := c.cc.Invoke(ctx, "/pins.Pins/SavePicture", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pinsClient) RemovePin(ctx context.Context, in *PinInBoard, opts ...grpc.CallOption) (*Error, error) {
	out := new(Error)
	err := c.cc.Invoke(ctx, "/pins.Pins/RemovePin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pinsClient) DeletePin(ctx context.Context, in *PinID, opts ...grpc.CallOption) (*Error, error) {
	out := new(Error)
	err := c.cc.Invoke(ctx, "/pins.Pins/DeletePin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pinsClient) UploadPicture(ctx context.Context, opts ...grpc.CallOption) (Pins_UploadPictureClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Pins_serviceDesc.Streams[0], "/pins.Pins/UploadPicture", opts...)
	if err != nil {
		return nil, err
	}
	x := &pinsUploadPictureClient{stream}
	return x, nil
}

type Pins_UploadPictureClient interface {
	Send(*UploadImage) error
	CloseAndRecv() (*UploadImageResponse, error)
	grpc.ClientStream
}

type pinsUploadPictureClient struct {
	grpc.ClientStream
}

func (x *pinsUploadPictureClient) Send(m *UploadImage) error {
	return x.ClientStream.SendMsg(m)
}

func (x *pinsUploadPictureClient) CloseAndRecv() (*UploadImageResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(UploadImageResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *pinsClient) GetNumOfPins(ctx context.Context, in *Number, opts ...grpc.CallOption) (*PinsList, error) {
	out := new(PinsList)
	err := c.cc.Invoke(ctx, "/pins.Pins/GetNumOfPins", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pinsClient) SearchPins(ctx context.Context, in *SearchInput, opts ...grpc.CallOption) (*PinsList, error) {
	out := new(PinsList)
	err := c.cc.Invoke(ctx, "/pins.Pins/SearchPins", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pinsClient) PinRefCount(ctx context.Context, in *PinID, opts ...grpc.CallOption) (*Number, error) {
	out := new(Number)
	err := c.cc.Invoke(ctx, "/pins.Pins/PinRefCount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PinsServer is the server API for Pins service.
type PinsServer interface {
	AddBoard(context.Context, *Board) (*BoardID, error)
	GetBoard(context.Context, *BoardID) (*Board, error)
	GetBoards(context.Context, *UserID) (*BoardsList, error)
	GetInitUserBoard(context.Context, *UserID) (*BoardID, error)
	DeleteBoard(context.Context, *BoardID) (*Error, error)
	UploadBoardAvatar(context.Context, *FileInfo) (*Error, error)
	CreatePin(context.Context, *Pin) (*PinID, error)
	AddPin(context.Context, *PinInBoard) (*Error, error)
	GetPin(context.Context, *PinID) (*Pin, error)
	GetPins(context.Context, *BoardID) (*PinsList, error)
	GetLastUserPinID(context.Context, *UserID) (*PinID, error)
	SavePicture(context.Context, *Pin) (*Error, error)
	RemovePin(context.Context, *PinInBoard) (*Error, error)
	DeletePin(context.Context, *PinID) (*Error, error)
	UploadPicture(Pins_UploadPictureServer) error
	GetNumOfPins(context.Context, *Number) (*PinsList, error)
	SearchPins(context.Context, *SearchInput) (*PinsList, error)
	PinRefCount(context.Context, *PinID) (*Number, error)
}

// UnimplementedPinsServer can be embedded to have forward compatible implementations.
type UnimplementedPinsServer struct {
}

func (*UnimplementedPinsServer) AddBoard(context.Context, *Board) (*BoardID, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddBoard not implemented")
}
func (*UnimplementedPinsServer) GetBoard(context.Context, *BoardID) (*Board, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBoard not implemented")
}
func (*UnimplementedPinsServer) GetBoards(context.Context, *UserID) (*BoardsList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBoards not implemented")
}
func (*UnimplementedPinsServer) GetInitUserBoard(context.Context, *UserID) (*BoardID, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInitUserBoard not implemented")
}
func (*UnimplementedPinsServer) DeleteBoard(context.Context, *BoardID) (*Error, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBoard not implemented")
}
func (*UnimplementedPinsServer) UploadBoardAvatar(context.Context, *FileInfo) (*Error, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadBoardAvatar not implemented")
}
func (*UnimplementedPinsServer) CreatePin(context.Context, *Pin) (*PinID, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePin not implemented")
}
func (*UnimplementedPinsServer) AddPin(context.Context, *PinInBoard) (*Error, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddPin not implemented")
}
func (*UnimplementedPinsServer) GetPin(context.Context, *PinID) (*Pin, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPin not implemented")
}
func (*UnimplementedPinsServer) GetPins(context.Context, *BoardID) (*PinsList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPins not implemented")
}
func (*UnimplementedPinsServer) GetLastUserPinID(context.Context, *UserID) (*PinID, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLastUserPinID not implemented")
}
func (*UnimplementedPinsServer) SavePicture(context.Context, *Pin) (*Error, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SavePicture not implemented")
}
func (*UnimplementedPinsServer) RemovePin(context.Context, *PinInBoard) (*Error, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemovePin not implemented")
}
func (*UnimplementedPinsServer) DeletePin(context.Context, *PinID) (*Error, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePin not implemented")
}
func (*UnimplementedPinsServer) UploadPicture(Pins_UploadPictureServer) error {
	return status.Errorf(codes.Unimplemented, "method UploadPicture not implemented")
}
func (*UnimplementedPinsServer) GetNumOfPins(context.Context, *Number) (*PinsList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNumOfPins not implemented")
}
func (*UnimplementedPinsServer) SearchPins(context.Context, *SearchInput) (*PinsList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchPins not implemented")
}
func (*UnimplementedPinsServer) PinRefCount(context.Context, *PinID) (*Number, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PinRefCount not implemented")
}

func RegisterPinsServer(s *grpc.Server, srv PinsServer) {
	s.RegisterService(&_Pins_serviceDesc, srv)
}

func _Pins_AddBoard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Board)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PinsServer).AddBoard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pins.Pins/AddBoard",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PinsServer).AddBoard(ctx, req.(*Board))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pins_GetBoard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BoardID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PinsServer).GetBoard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pins.Pins/GetBoard",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PinsServer).GetBoard(ctx, req.(*BoardID))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pins_GetBoards_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PinsServer).GetBoards(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pins.Pins/GetBoards",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PinsServer).GetBoards(ctx, req.(*UserID))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pins_GetInitUserBoard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PinsServer).GetInitUserBoard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pins.Pins/GetInitUserBoard",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PinsServer).GetInitUserBoard(ctx, req.(*UserID))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pins_DeleteBoard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BoardID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PinsServer).DeleteBoard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pins.Pins/DeleteBoard",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PinsServer).DeleteBoard(ctx, req.(*BoardID))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pins_UploadBoardAvatar_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FileInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PinsServer).UploadBoardAvatar(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pins.Pins/UploadBoardAvatar",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PinsServer).UploadBoardAvatar(ctx, req.(*FileInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pins_CreatePin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Pin)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PinsServer).CreatePin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pins.Pins/CreatePin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PinsServer).CreatePin(ctx, req.(*Pin))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pins_AddPin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PinInBoard)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PinsServer).AddPin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pins.Pins/AddPin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PinsServer).AddPin(ctx, req.(*PinInBoard))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pins_GetPin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PinID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PinsServer).GetPin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pins.Pins/GetPin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PinsServer).GetPin(ctx, req.(*PinID))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pins_GetPins_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BoardID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PinsServer).GetPins(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pins.Pins/GetPins",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PinsServer).GetPins(ctx, req.(*BoardID))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pins_GetLastUserPinID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PinsServer).GetLastUserPinID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pins.Pins/GetLastUserPinID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PinsServer).GetLastUserPinID(ctx, req.(*UserID))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pins_SavePicture_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Pin)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PinsServer).SavePicture(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pins.Pins/SavePicture",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PinsServer).SavePicture(ctx, req.(*Pin))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pins_RemovePin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PinInBoard)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PinsServer).RemovePin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pins.Pins/RemovePin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PinsServer).RemovePin(ctx, req.(*PinInBoard))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pins_DeletePin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PinID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PinsServer).DeletePin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pins.Pins/DeletePin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PinsServer).DeletePin(ctx, req.(*PinID))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pins_UploadPicture_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(PinsServer).UploadPicture(&pinsUploadPictureServer{stream})
}

type Pins_UploadPictureServer interface {
	SendAndClose(*UploadImageResponse) error
	Recv() (*UploadImage, error)
	grpc.ServerStream
}

type pinsUploadPictureServer struct {
	grpc.ServerStream
}

func (x *pinsUploadPictureServer) SendAndClose(m *UploadImageResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *pinsUploadPictureServer) Recv() (*UploadImage, error) {
	m := new(UploadImage)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Pins_GetNumOfPins_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Number)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PinsServer).GetNumOfPins(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pins.Pins/GetNumOfPins",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PinsServer).GetNumOfPins(ctx, req.(*Number))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pins_SearchPins_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PinsServer).SearchPins(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pins.Pins/SearchPins",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PinsServer).SearchPins(ctx, req.(*SearchInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pins_PinRefCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PinID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PinsServer).PinRefCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pins.Pins/PinRefCount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PinsServer).PinRefCount(ctx, req.(*PinID))
	}
	return interceptor(ctx, in, info, handler)
}

var _Pins_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pins.Pins",
	HandlerType: (*PinsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddBoard",
			Handler:    _Pins_AddBoard_Handler,
		},
		{
			MethodName: "GetBoard",
			Handler:    _Pins_GetBoard_Handler,
		},
		{
			MethodName: "GetBoards",
			Handler:    _Pins_GetBoards_Handler,
		},
		{
			MethodName: "GetInitUserBoard",
			Handler:    _Pins_GetInitUserBoard_Handler,
		},
		{
			MethodName: "DeleteBoard",
			Handler:    _Pins_DeleteBoard_Handler,
		},
		{
			MethodName: "UploadBoardAvatar",
			Handler:    _Pins_UploadBoardAvatar_Handler,
		},
		{
			MethodName: "CreatePin",
			Handler:    _Pins_CreatePin_Handler,
		},
		{
			MethodName: "AddPin",
			Handler:    _Pins_AddPin_Handler,
		},
		{
			MethodName: "GetPin",
			Handler:    _Pins_GetPin_Handler,
		},
		{
			MethodName: "GetPins",
			Handler:    _Pins_GetPins_Handler,
		},
		{
			MethodName: "GetLastUserPinID",
			Handler:    _Pins_GetLastUserPinID_Handler,
		},
		{
			MethodName: "SavePicture",
			Handler:    _Pins_SavePicture_Handler,
		},
		{
			MethodName: "RemovePin",
			Handler:    _Pins_RemovePin_Handler,
		},
		{
			MethodName: "DeletePin",
			Handler:    _Pins_DeletePin_Handler,
		},
		{
			MethodName: "GetNumOfPins",
			Handler:    _Pins_GetNumOfPins_Handler,
		},
		{
			MethodName: "SearchPins",
			Handler:    _Pins_SearchPins_Handler,
		},
		{
			MethodName: "PinRefCount",
			Handler:    _Pins_PinRefCount_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "UploadPicture",
			Handler:       _Pins_UploadPicture_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "pins.proto",
}
