// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ShopProductClient is the client API for ShopProduct service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ShopProductClient interface {
	CreateShop(ctx context.Context, in *CreateShopRequest, opts ...grpc.CallOption) (*CreateShopResponse, error)
	EditShop(ctx context.Context, in *EditShopRequest, opts ...grpc.CallOption) (*Empty, error)
	GetShop(ctx context.Context, in *GetShopRequest, opts ...grpc.CallOption) (*Shop, error)
	CreateProduct(ctx context.Context, in *CreateProductRequest, opts ...grpc.CallOption) (*CreateProductResponse, error)
	EditProduct(ctx context.Context, in *EditProductRequest, opts ...grpc.CallOption) (*Empty, error)
	GetProduct(ctx context.Context, in *GetProductRequest, opts ...grpc.CallOption) (*Product, error)
}

type shopProductClient struct {
	cc grpc.ClientConnInterface
}

func NewShopProductClient(cc grpc.ClientConnInterface) ShopProductClient {
	return &shopProductClient{cc}
}

func (c *shopProductClient) CreateShop(ctx context.Context, in *CreateShopRequest, opts ...grpc.CallOption) (*CreateShopResponse, error) {
	out := new(CreateShopResponse)
	err := c.cc.Invoke(ctx, "/shopProduct.ShopProduct/CreateShop", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shopProductClient) EditShop(ctx context.Context, in *EditShopRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/shopProduct.ShopProduct/EditShop", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shopProductClient) GetShop(ctx context.Context, in *GetShopRequest, opts ...grpc.CallOption) (*Shop, error) {
	out := new(Shop)
	err := c.cc.Invoke(ctx, "/shopProduct.ShopProduct/GetShop", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shopProductClient) CreateProduct(ctx context.Context, in *CreateProductRequest, opts ...grpc.CallOption) (*CreateProductResponse, error) {
	out := new(CreateProductResponse)
	err := c.cc.Invoke(ctx, "/shopProduct.ShopProduct/CreateProduct", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shopProductClient) EditProduct(ctx context.Context, in *EditProductRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/shopProduct.ShopProduct/EditProduct", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shopProductClient) GetProduct(ctx context.Context, in *GetProductRequest, opts ...grpc.CallOption) (*Product, error) {
	out := new(Product)
	err := c.cc.Invoke(ctx, "/shopProduct.ShopProduct/GetProduct", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ShopProductServer is the server API for ShopProduct service.
// All implementations must embed UnimplementedShopProductServer
// for forward compatibility
type ShopProductServer interface {
	CreateShop(context.Context, *CreateShopRequest) (*CreateShopResponse, error)
	EditShop(context.Context, *EditShopRequest) (*Empty, error)
	GetShop(context.Context, *GetShopRequest) (*Shop, error)
	CreateProduct(context.Context, *CreateProductRequest) (*CreateProductResponse, error)
	EditProduct(context.Context, *EditProductRequest) (*Empty, error)
	GetProduct(context.Context, *GetProductRequest) (*Product, error)
	mustEmbedUnimplementedShopProductServer()
}

// UnimplementedShopProductServer must be embedded to have forward compatible implementations.
type UnimplementedShopProductServer struct {
}

func (UnimplementedShopProductServer) CreateShop(context.Context, *CreateShopRequest) (*CreateShopResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateShop not implemented")
}
func (UnimplementedShopProductServer) EditShop(context.Context, *EditShopRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EditShop not implemented")
}
func (UnimplementedShopProductServer) GetShop(context.Context, *GetShopRequest) (*Shop, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetShop not implemented")
}
func (UnimplementedShopProductServer) CreateProduct(context.Context, *CreateProductRequest) (*CreateProductResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateProduct not implemented")
}
func (UnimplementedShopProductServer) EditProduct(context.Context, *EditProductRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EditProduct not implemented")
}
func (UnimplementedShopProductServer) GetProduct(context.Context, *GetProductRequest) (*Product, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProduct not implemented")
}
func (UnimplementedShopProductServer) mustEmbedUnimplementedShopProductServer() {}

// UnsafeShopProductServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ShopProductServer will
// result in compilation errors.
type UnsafeShopProductServer interface {
	mustEmbedUnimplementedShopProductServer()
}

func RegisterShopProductServer(s grpc.ServiceRegistrar, srv ShopProductServer) {
	s.RegisterService(&ShopProduct_ServiceDesc, srv)
}

func _ShopProduct_CreateShop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateShopRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShopProductServer).CreateShop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shopProduct.ShopProduct/CreateShop",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShopProductServer).CreateShop(ctx, req.(*CreateShopRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShopProduct_EditShop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EditShopRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShopProductServer).EditShop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shopProduct.ShopProduct/EditShop",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShopProductServer).EditShop(ctx, req.(*EditShopRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShopProduct_GetShop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetShopRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShopProductServer).GetShop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shopProduct.ShopProduct/GetShop",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShopProductServer).GetShop(ctx, req.(*GetShopRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShopProduct_CreateProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateProductRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShopProductServer).CreateProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shopProduct.ShopProduct/CreateProduct",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShopProductServer).CreateProduct(ctx, req.(*CreateProductRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShopProduct_EditProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EditProductRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShopProductServer).EditProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shopProduct.ShopProduct/EditProduct",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShopProductServer).EditProduct(ctx, req.(*EditProductRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShopProduct_GetProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProductRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShopProductServer).GetProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shopProduct.ShopProduct/GetProduct",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShopProductServer).GetProduct(ctx, req.(*GetProductRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ShopProduct_ServiceDesc is the grpc.ServiceDesc for ShopProduct service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ShopProduct_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "shopProduct.ShopProduct",
	HandlerType: (*ShopProductServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateShop",
			Handler:    _ShopProduct_CreateShop_Handler,
		},
		{
			MethodName: "EditShop",
			Handler:    _ShopProduct_EditShop_Handler,
		},
		{
			MethodName: "GetShop",
			Handler:    _ShopProduct_GetShop_Handler,
		},
		{
			MethodName: "CreateProduct",
			Handler:    _ShopProduct_CreateProduct_Handler,
		},
		{
			MethodName: "EditProduct",
			Handler:    _ShopProduct_EditProduct_Handler,
		},
		{
			MethodName: "GetProduct",
			Handler:    _ShopProduct_GetProduct_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "shopProduct.proto",
}
