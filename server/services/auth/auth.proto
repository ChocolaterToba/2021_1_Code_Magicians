syntax = "proto3";

// protoc --go_out=plugins=grpc:. *.proto
// PATH="${PATH}:${HOME}/go/bin" protoc --go_out=plugins=grpc:. *.proto

option go_package = "./";
import "google/protobuf/empty.proto";

package auth;

message Session {
  string SessionID = 1;
  string Number = 2;
}

message UserReg {
  string  Username = 1;
  string  Password = 2;
  string  FirstName = 3;
  string  LastName = 4;
  string  Email = 5;

}

message UserAuth {
  string Username = 1;
  string Password = 2;
}

message UserOutput {
  int32    UserID = 1;
  string   Username = 2;
  string   Email = 3;
  string   FirstName = 4;
  string   LastName = 5;
  string   Avatar = 6;
  int32    Following = 7 ;
  int32    FollowedBy = 8;
  bool     Followed = 9 ;
}

message UsersListOutput {
  repeated UserOutput Users = 1;
}


message UserID {
  int32 uid = 1;
}

message Username {
  string username = 1;
}

message UploadAvatar {
  oneof data {
    ImageInfo info = 1;
    bytes chunk_data = 2;
  };
}

message Follows {
  int32 FollowerID = 1;
  int32 FollowedID = 2;
}

message IfFollowedResponse {
  bool isFollowed = 1;
}

message ImageInfo {
  int32 UserID = 1;
  string Extension = 2;
}

message Cookie {
  string sessionValue = 1;
}
message CookieInfo {
  int32 userID = 1;
  Cookie sessionValue = 2;
}

message CheckCookieResponse {
  CookieInfo cookieInfo = 1;
  bool isCookie = 2;
}

message Error {}

service Auth {
  rpc   CreateUser(UserReg) returns (UserID) {}
  rpc   SaveUser(UserReg) returns (Error) {}
  rpc   DeleteUser(UserID) returns (Error) {}
  rpc   GetUser(UserID) returns (UserOutput) {}
  rpc   GetUserByUsername(Username) returns (UserOutput) {}
  rpc   GetUsers(google.protobuf.Empty) returns (UsersListOutput) {}
  rpc   CheckUserCredentials(UserAuth) returns (UserOutput) {}
  rpc   UpdateAvatar(stream UploadAvatar) returns (Error) {}
  rpc   Follow(Follows) returns (Error) {}
  rpc   Unfollow(Follows) returns (Error) {}
  rpc   CheckIfFollowed(Follows) returns (IfFollowedResponse) {}
  rpc   GenerateCookie(google.protobuf.Empty) returns (Cookie) {}
  rpc   AddCookie(CookieInfo) returns (Error) {}
  rpc   CheckCookie(Cookie) returns (CheckCookieResponse) {}
  rpc   RemoveCookie(CookieInfo) returns (Error) {}
}