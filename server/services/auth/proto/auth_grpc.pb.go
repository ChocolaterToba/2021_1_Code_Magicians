// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AuthClient is the client API for Auth service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AuthClient interface {
	CheckUserCredentials(ctx context.Context, in *UserAuth, opts ...grpc.CallOption) (*Error, error)
	AddCookieInfo(ctx context.Context, in *CookieInfo, opts ...grpc.CallOption) (*Error, error)
	SearchCookieByValue(ctx context.Context, in *CookieValue, opts ...grpc.CallOption) (*CookieInfo, error)
	SearchCookieByUserID(ctx context.Context, in *UserID, opts ...grpc.CallOption) (*CookieInfo, error)
	RemoveCookie(ctx context.Context, in *CookieInfo, opts ...grpc.CallOption) (*Error, error)
	GetUserIDByVkID(ctx context.Context, in *VkIDInfo, opts ...grpc.CallOption) (*UserID, error)
	AddVkID(ctx context.Context, in *VkAndUserIDInfo, opts ...grpc.CallOption) (*Error, error)
}

type authClient struct {
	cc grpc.ClientConnInterface
}

func NewAuthClient(cc grpc.ClientConnInterface) AuthClient {
	return &authClient{cc}
}

func (c *authClient) CheckUserCredentials(ctx context.Context, in *UserAuth, opts ...grpc.CallOption) (*Error, error) {
	out := new(Error)
	err := c.cc.Invoke(ctx, "/auth.Auth/CheckUserCredentials", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authClient) AddCookieInfo(ctx context.Context, in *CookieInfo, opts ...grpc.CallOption) (*Error, error) {
	out := new(Error)
	err := c.cc.Invoke(ctx, "/auth.Auth/AddCookieInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authClient) SearchCookieByValue(ctx context.Context, in *CookieValue, opts ...grpc.CallOption) (*CookieInfo, error) {
	out := new(CookieInfo)
	err := c.cc.Invoke(ctx, "/auth.Auth/SearchCookieByValue", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authClient) SearchCookieByUserID(ctx context.Context, in *UserID, opts ...grpc.CallOption) (*CookieInfo, error) {
	out := new(CookieInfo)
	err := c.cc.Invoke(ctx, "/auth.Auth/SearchCookieByUserID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authClient) RemoveCookie(ctx context.Context, in *CookieInfo, opts ...grpc.CallOption) (*Error, error) {
	out := new(Error)
	err := c.cc.Invoke(ctx, "/auth.Auth/RemoveCookie", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authClient) GetUserIDByVkID(ctx context.Context, in *VkIDInfo, opts ...grpc.CallOption) (*UserID, error) {
	out := new(UserID)
	err := c.cc.Invoke(ctx, "/auth.Auth/GetUserIDByVkID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authClient) AddVkID(ctx context.Context, in *VkAndUserIDInfo, opts ...grpc.CallOption) (*Error, error) {
	out := new(Error)
	err := c.cc.Invoke(ctx, "/auth.Auth/AddVkID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AuthServer is the server API for Auth service.
// All implementations must embed UnimplementedAuthServer
// for forward compatibility
type AuthServer interface {
	CheckUserCredentials(context.Context, *UserAuth) (*Error, error)
	AddCookieInfo(context.Context, *CookieInfo) (*Error, error)
	SearchCookieByValue(context.Context, *CookieValue) (*CookieInfo, error)
	SearchCookieByUserID(context.Context, *UserID) (*CookieInfo, error)
	RemoveCookie(context.Context, *CookieInfo) (*Error, error)
	GetUserIDByVkID(context.Context, *VkIDInfo) (*UserID, error)
	AddVkID(context.Context, *VkAndUserIDInfo) (*Error, error)
	mustEmbedUnimplementedAuthServer()
}

// UnimplementedAuthServer must be embedded to have forward compatible implementations.
type UnimplementedAuthServer struct {
}

func (UnimplementedAuthServer) CheckUserCredentials(context.Context, *UserAuth) (*Error, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckUserCredentials not implemented")
}
func (UnimplementedAuthServer) AddCookieInfo(context.Context, *CookieInfo) (*Error, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddCookieInfo not implemented")
}
func (UnimplementedAuthServer) SearchCookieByValue(context.Context, *CookieValue) (*CookieInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchCookieByValue not implemented")
}
func (UnimplementedAuthServer) SearchCookieByUserID(context.Context, *UserID) (*CookieInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchCookieByUserID not implemented")
}
func (UnimplementedAuthServer) RemoveCookie(context.Context, *CookieInfo) (*Error, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveCookie not implemented")
}
func (UnimplementedAuthServer) GetUserIDByVkID(context.Context, *VkIDInfo) (*UserID, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserIDByVkID not implemented")
}
func (UnimplementedAuthServer) AddVkID(context.Context, *VkAndUserIDInfo) (*Error, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddVkID not implemented")
}
func (UnimplementedAuthServer) mustEmbedUnimplementedAuthServer() {}

// UnsafeAuthServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AuthServer will
// result in compilation errors.
type UnsafeAuthServer interface {
	mustEmbedUnimplementedAuthServer()
}

func RegisterAuthServer(s grpc.ServiceRegistrar, srv AuthServer) {
	s.RegisterService(&Auth_ServiceDesc, srv)
}

func _Auth_CheckUserCredentials_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserAuth)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).CheckUserCredentials(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.Auth/CheckUserCredentials",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).CheckUserCredentials(ctx, req.(*UserAuth))
	}
	return interceptor(ctx, in, info, handler)
}

func _Auth_AddCookieInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CookieInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).AddCookieInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.Auth/AddCookieInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).AddCookieInfo(ctx, req.(*CookieInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _Auth_SearchCookieByValue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CookieValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).SearchCookieByValue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.Auth/SearchCookieByValue",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).SearchCookieByValue(ctx, req.(*CookieValue))
	}
	return interceptor(ctx, in, info, handler)
}

func _Auth_SearchCookieByUserID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).SearchCookieByUserID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.Auth/SearchCookieByUserID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).SearchCookieByUserID(ctx, req.(*UserID))
	}
	return interceptor(ctx, in, info, handler)
}

func _Auth_RemoveCookie_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CookieInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).RemoveCookie(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.Auth/RemoveCookie",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).RemoveCookie(ctx, req.(*CookieInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _Auth_GetUserIDByVkID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VkIDInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).GetUserIDByVkID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.Auth/GetUserIDByVkID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).GetUserIDByVkID(ctx, req.(*VkIDInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _Auth_AddVkID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VkAndUserIDInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).AddVkID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.Auth/AddVkID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).AddVkID(ctx, req.(*VkAndUserIDInfo))
	}
	return interceptor(ctx, in, info, handler)
}

// Auth_ServiceDesc is the grpc.ServiceDesc for Auth service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Auth_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "auth.Auth",
	HandlerType: (*AuthServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CheckUserCredentials",
			Handler:    _Auth_CheckUserCredentials_Handler,
		},
		{
			MethodName: "AddCookieInfo",
			Handler:    _Auth_AddCookieInfo_Handler,
		},
		{
			MethodName: "SearchCookieByValue",
			Handler:    _Auth_SearchCookieByValue_Handler,
		},
		{
			MethodName: "SearchCookieByUserID",
			Handler:    _Auth_SearchCookieByUserID_Handler,
		},
		{
			MethodName: "RemoveCookie",
			Handler:    _Auth_RemoveCookie_Handler,
		},
		{
			MethodName: "GetUserIDByVkID",
			Handler:    _Auth_GetUserIDByVkID_Handler,
		},
		{
			MethodName: "AddVkID",
			Handler:    _Auth_AddVkID_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "auth.proto",
}
