// Code generated by MockGen. DO NOT EDIT.
// Source: usage/notification_app.go

// Package mock_application is a generated GoMock package.
package mock_application

import (
	entity "pinterest/domain/entity"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockNotificationAppInterface is a mock of NotificationAppInterface interface.
type MockNotificationAppInterface struct {
	ctrl     *gomock.Controller
	recorder *MockNotificationAppInterfaceMockRecorder
}

// MockNotificationAppInterfaceMockRecorder is the mock recorder for MockNotificationAppInterface.
type MockNotificationAppInterfaceMockRecorder struct {
	mock *MockNotificationAppInterface
}

// NewMockNotificationAppInterface creates a new mock instance.
func NewMockNotificationAppInterface(ctrl *gomock.Controller) *MockNotificationAppInterface {
	mock := &MockNotificationAppInterface{ctrl: ctrl}
	mock.recorder = &MockNotificationAppInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNotificationAppInterface) EXPECT() *MockNotificationAppInterfaceMockRecorder {
	return m.recorder
}

// AddNotification mocks base method.
func (m *MockNotificationAppInterface) AddNotification(notification *entity.Notification) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddNotification", notification)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddNotification indicates an expected call of AddNotification.
func (mr *MockNotificationAppInterfaceMockRecorder) AddNotification(notification interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddNotification", reflect.TypeOf((*MockNotificationAppInterface)(nil).AddNotification), notification)
}

// EditNotification mocks base method.
func (m *MockNotificationAppInterface) EditNotification(notification *entity.Notification) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EditNotification", notification)
	ret0, _ := ret[0].(error)
	return ret0
}

// EditNotification indicates an expected call of EditNotification.
func (mr *MockNotificationAppInterfaceMockRecorder) EditNotification(notification interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EditNotification", reflect.TypeOf((*MockNotificationAppInterface)(nil).EditNotification), notification)
}

// GetNotification mocks base method.
func (m *MockNotificationAppInterface) GetNotification(userID, notificationID int) (*entity.Notification, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNotification", userID, notificationID)
	ret0, _ := ret[0].(*entity.Notification)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNotification indicates an expected call of GetNotification.
func (mr *MockNotificationAppInterfaceMockRecorder) GetNotification(userID, notificationID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNotification", reflect.TypeOf((*MockNotificationAppInterface)(nil).GetNotification), userID, notificationID)
}

// ReadNotification mocks base method.
func (m *MockNotificationAppInterface) ReadNotification(userID, notificationID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadNotification", userID, notificationID)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReadNotification indicates an expected call of ReadNotification.
func (mr *MockNotificationAppInterfaceMockRecorder) ReadNotification(userID, notificationID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadNotification", reflect.TypeOf((*MockNotificationAppInterface)(nil).ReadNotification), userID, notificationID)
}

// RemoveNotification mocks base method.
func (m *MockNotificationAppInterface) RemoveNotification(userID, notificationID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveNotification", userID, notificationID)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveNotification indicates an expected call of RemoveNotification.
func (mr *MockNotificationAppInterfaceMockRecorder) RemoveNotification(userID, notificationID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveNotification", reflect.TypeOf((*MockNotificationAppInterface)(nil).RemoveNotification), userID, notificationID)
}

// SendAllNotifications mocks base method.
func (m *MockNotificationAppInterface) SendAllNotifications(userID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendAllNotifications", userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendAllNotifications indicates an expected call of SendAllNotifications.
func (mr *MockNotificationAppInterfaceMockRecorder) SendAllNotifications(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendAllNotifications", reflect.TypeOf((*MockNotificationAppInterface)(nil).SendAllNotifications), userID)
}

// SendNotification mocks base method.
func (m *MockNotificationAppInterface) SendNotification(userID, notificationID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendNotification", userID, notificationID)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendNotification indicates an expected call of SendNotification.
func (mr *MockNotificationAppInterfaceMockRecorder) SendNotification(userID, notificationID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendNotification", reflect.TypeOf((*MockNotificationAppInterface)(nil).SendNotification), userID, notificationID)
}
