// Code generated by MockGen. DO NOT EDIT.
// Source: application/websocket_app.go

// Package mock_application is a generated GoMock package.
package mock_application

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	websocket "github.com/gorilla/websocket"
)

// MockWebsocketAppInterface is a mock of WebsocketAppInterface interface.
type MockWebsocketAppInterface struct {
	ctrl     *gomock.Controller
	recorder *MockWebsocketAppInterfaceMockRecorder
}

// MockWebsocketAppInterfaceMockRecorder is the mock recorder for MockWebsocketAppInterface.
type MockWebsocketAppInterfaceMockRecorder struct {
	mock *MockWebsocketAppInterface
}

// NewMockWebsocketAppInterface creates a new mock instance.
func NewMockWebsocketAppInterface(ctrl *gomock.Controller) *MockWebsocketAppInterface {
	mock := &MockWebsocketAppInterface{ctrl: ctrl}
	mock.recorder = &MockWebsocketAppInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWebsocketAppInterface) EXPECT() *MockWebsocketAppInterfaceMockRecorder {
	return m.recorder
}

// ChangeClient mocks base method.
func (m *MockWebsocketAppInterface) ChangeClient(userID int, client *websocket.Conn) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChangeClient", userID, client)
	ret0, _ := ret[0].(error)
	return ret0
}

// ChangeClient indicates an expected call of ChangeClient.
func (mr *MockWebsocketAppInterfaceMockRecorder) ChangeClient(userID, client interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangeClient", reflect.TypeOf((*MockWebsocketAppInterface)(nil).ChangeClient), userID, client)
}

// ChangeToken mocks base method.
func (m *MockWebsocketAppInterface) ChangeToken(userID int, csrfToken string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChangeToken", userID, csrfToken)
	ret0, _ := ret[0].(error)
	return ret0
}

// ChangeToken indicates an expected call of ChangeToken.
func (mr *MockWebsocketAppInterfaceMockRecorder) ChangeToken(userID, csrfToken interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangeToken", reflect.TypeOf((*MockWebsocketAppInterface)(nil).ChangeToken), userID, csrfToken)
}

// CheckToken mocks base method.
func (m *MockWebsocketAppInterface) CheckToken(userID int, csrfToken string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckToken", userID, csrfToken)
	ret0, _ := ret[0].(error)
	return ret0
}

// CheckToken indicates an expected call of CheckToken.
func (mr *MockWebsocketAppInterfaceMockRecorder) CheckToken(userID, csrfToken interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckToken", reflect.TypeOf((*MockWebsocketAppInterface)(nil).CheckToken), userID, csrfToken)
}

// GetClient mocks base method.
func (m *MockWebsocketAppInterface) GetClient(userID int) (*websocket.Conn, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClient", userID)
	ret0, _ := ret[0].(*websocket.Conn)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClient indicates an expected call of GetClient.
func (mr *MockWebsocketAppInterfaceMockRecorder) GetClient(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClient", reflect.TypeOf((*MockWebsocketAppInterface)(nil).GetClient), userID)
}
